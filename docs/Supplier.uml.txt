@startuml


interface       ISupplier
{
  IEntities<IReception> Receptions
}
interface       IReception
{
  IEntities<IReceptionGood> Goods

  +ValidateAsync(goodsToValidate: IList<IGoodConfirmation>) : Task
  +Confirmation() : IConfirmation
}

interface     IConfirmation
{
  IReception Reception
  IConfirmationState State

  +AddAsync(goodToAdd : IReceptionGood , quantity : int ) : Task
  +RemoveAsync(goodToRemove: IReceptionGood , quantity: int): Task
  +CommitAsync() : Task
  +ToListAsync(): Task<List<IGoodConfirmation>> 
  +ClearAsync(): Task
}

interface       IReceptionGood
{
  int Quantity
  IGoodConfirmation Confirmation
  
  +ConfirmedAsync() : Task<bool> 
  +Clear() : IReceptionGood
}
interface       IGoodConfirmation
{
  IReceptionGood Good
  IConfirmationState State
  
  +int Increase(quantity :int)
  +int Decrease(quantity :int)
  +void Clear()
}

interface     IConfirmationState
{
  +ToEnumAsync() : Task<ConfirmationState>
}

ISupplier "1" *-- "many" IReception : contains

IReception "1" *-- "many" IReceptionGood : contains
IReception *-- IConfirmation
IReceptionGood *-- IGoodConfirmation

IConfirmation *-- IReception
IConfirmation *-- IConfirmationState
IConfirmation "1" *-- "many" IReceptionGood : contains


IGoodConfirmation *-- IConfirmationState
IGoodConfirmation *-- IReceptionGood

@enduml

